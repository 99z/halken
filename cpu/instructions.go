// Package cpu instructions contains instruction opcodes & definitions
// Reference: http://www.pastraiser.com/cpu/gameboy/gameboyopcodes.html
package cpu

// Instruction holds all relevant information for CPU instructions
// Don't think we need to store opcode in the struct since
// it will be equal to the byte key of the instruction in the map
type Instruction struct {
	Mnemonic string
	// Number of T cycles instruction takes to execute
	// Divide by 4 to get number of M cycles
	TCycles uint16
	// Currently this isn't actually used - can't think of a way to reference
	// this value by the time we are inside of an executor function
	NumOperands uint16
	Executor    func() int // Executes appropriate function
}

// Non-CB prefixed instructions
// Parentheses indicate an address
// i8 is 8-bit immediate, i16 is 16-bit immediate
// a16 is a 16-bit address, a8 is an 8-bit address added to $FF00
// s8 is 8-bit signed data, added to PC to move it
func (gbcpu *GBCPU) loadInstructions() {
	gbcpu.Instrs = map[byte]Instruction{
		0x00: Instruction{"NOP", 4, 1, func() int { return 0 }},
		0x01: Instruction{"LD BC,i16", 12, 3, func() int { gbcpu.LDrrnn(&gbcpu.Regs.b, &gbcpu.Regs.c); return 0 }},
		0x02: Instruction{"LD (BC),A", 8, 1, func() int { gbcpu.LDaar(&gbcpu.Regs.b, &gbcpu.Regs.c, &gbcpu.Regs.a); return 0 }},
		0x03: Instruction{"INC BC", 8, 1, func() int { gbcpu.INCrr(&gbcpu.Regs.b, &gbcpu.Regs.c); return 0 }},
		0x04: Instruction{"INC B", 4, 1, func() int { gbcpu.INCr(&gbcpu.Regs.b); return 0 }},
		0x05: Instruction{"DEC B", 4, 1, func() int { gbcpu.DECr(&gbcpu.Regs.b); return 0 }},
		0x06: Instruction{"LD B,i8", 8, 2, func() int { gbcpu.LDrn(&gbcpu.Regs.b); return 0 }},
		0x07: Instruction{"RLCA", 4, 1, func() int { gbcpu.RLCA(); return 0 }},
		0x08: Instruction{"LD (a16),SP", 20, 3, func() int { gbcpu.LDaaSP(); return 0 }},
		0x09: Instruction{"ADD HL,BC", 8, 1, func() int { gbcpu.ADDHLrr(&gbcpu.Regs.b, &gbcpu.Regs.c); return 0 }},
		0x0A: Instruction{"LD A,(BC)", 8, 1, func() int { gbcpu.LDraa(&gbcpu.Regs.a, &gbcpu.Regs.b, &gbcpu.Regs.c); return 0 }},
		0x0B: Instruction{"DEC BC", 8, 1, func() int { gbcpu.DECrr(&gbcpu.Regs.b, &gbcpu.Regs.c); return 0 }},
		0x0C: Instruction{"INC C", 4, 1, func() int { gbcpu.INCr(&gbcpu.Regs.c); return 0 }},
		0x0D: Instruction{"DEC C", 4, 1, func() int { gbcpu.DECr(&gbcpu.Regs.c); return 0 }},
		0x0E: Instruction{"LD C,i8", 8, 2, func() int { gbcpu.LDrn(&gbcpu.Regs.c); return 0 }},
		0x0F: Instruction{"RRCA", 4, 1, func() int { gbcpu.RRCA(); return 0 }},
		// STOP hardware bug
		// https://stackoverflow.com/questions/41353869/length-of-instruction-ld-a-c-in-gameboy-z80-processor
		0x10: Instruction{"STOP", 4, 1, func() int { return 0 }},
		0x11: Instruction{"LD DE,i16", 12, 3, func() int { gbcpu.LDrrnn(&gbcpu.Regs.d, &gbcpu.Regs.e); return 0 }},
		0x12: Instruction{"LD (DE),A", 8, 1, func() int { gbcpu.LDaar(&gbcpu.Regs.d, &gbcpu.Regs.e, &gbcpu.Regs.a); return 0 }},
		0x13: Instruction{"INC DE", 4, 1, func() int { gbcpu.INCrr(&gbcpu.Regs.d, &gbcpu.Regs.e); return 0 }},
		0x14: Instruction{"INC D", 4, 1, func() int { gbcpu.INCr(&gbcpu.Regs.d); return 0 }},
		0x15: Instruction{"DEC D", 4, 1, func() int { gbcpu.DECr(&gbcpu.Regs.d); return 0 }},
		0x16: Instruction{"LD D,i8", 8, 2, func() int { gbcpu.LDrn(&gbcpu.Regs.d); return 0 }},
		0x17: Instruction{"RLA", 4, 1, func() int { gbcpu.RLA(); return 0 }},
		0x18: Instruction{"JR s8", 12, 2, func() int { gbcpu.JRn(); return 0 }},
		0x19: Instruction{"ADD HL,DE", 8, 1, func() int { gbcpu.ADDHLrr(&gbcpu.Regs.d, &gbcpu.Regs.e); return 0 }},
		0x1A: Instruction{"LD A,(DE)", 8, 1, func() int { gbcpu.LDraa(&gbcpu.Regs.a, &gbcpu.Regs.d, &gbcpu.Regs.e); return 0 }},
		0x1B: Instruction{"DEC DE", 8, 1, func() int { gbcpu.DECrr(&gbcpu.Regs.d, &gbcpu.Regs.e); return 0 }},
		0x1C: Instruction{"INC E", 4, 1, func() int { gbcpu.INCr(&gbcpu.Regs.e); return 0 }},
		0x1D: Instruction{"DEC E", 4, 1, func() int { gbcpu.DECr(&gbcpu.Regs.e); return 0 }},
		0x1E: Instruction{"LD E,i8", 8, 2, func() int { gbcpu.LDrn(&gbcpu.Regs.e); return 0 }},
		0x1F: Instruction{"RRA", 4, 1, func() int { gbcpu.RRA(); return 0 }},
		0x20: Instruction{"JR NZ,s8", 8, 2, func() int { return gbcpu.JRNZn() }},
		0x21: Instruction{"LD HL,i16", 12, 3, func() int { gbcpu.LDrrnn(&gbcpu.Regs.h, &gbcpu.Regs.l); return 0 }},
		0x22: Instruction{"LDI (HL),A", 8, 1, func() int { gbcpu.LDIHLA(); return 0 }},
		0x23: Instruction{"INC HL", 8, 1, func() int { gbcpu.INCrr(&gbcpu.Regs.h, &gbcpu.Regs.l); return 0 }},
		0x24: Instruction{"INC H", 4, 1, func() int { gbcpu.INCr(&gbcpu.Regs.h); return 0 }},
		0x25: Instruction{"DEC H", 4, 1, func() int { gbcpu.DECr(&gbcpu.Regs.h); return 0 }},
		0x26: Instruction{"LD H,i8", 8, 2, func() int { gbcpu.LDrn(&gbcpu.Regs.h); return 0 }},
		0x27: Instruction{"DAA", 4, 1, func() int { gbcpu.DAA(); return 0 }},
		0x28: Instruction{"JR Z,s8", 8, 2, func() int { return gbcpu.JRZn() }},
		0x29: Instruction{"ADD HL,HL", 8, 1, func() int { gbcpu.ADDHLrr(&gbcpu.Regs.h, &gbcpu.Regs.l); return 0 }},
		0x2A: Instruction{"LDI A,(HL)", 8, 1, func() int { gbcpu.LDIAHL(); return 0 }},
		0x2B: Instruction{"DEC HL", 8, 1, func() int { gbcpu.DECrr(&gbcpu.Regs.h, &gbcpu.Regs.l); return 0 }},
		0x2C: Instruction{"INC L", 4, 1, func() int { gbcpu.INCr(&gbcpu.Regs.l); return 0 }},
		0x2D: Instruction{"DEC L", 4, 1, func() int { gbcpu.DECr(&gbcpu.Regs.l); return 0 }},
		0x2E: Instruction{"LD L,i8", 8, 2, func() int { gbcpu.LDrn(&gbcpu.Regs.l); return 0 }},
		0x2F: Instruction{"CPL", 4, 1, func() int { gbcpu.CPL(); return 0 }},
		0x30: Instruction{"JR NC,s8", 8, 2, func() int { return gbcpu.JRNCn() }},
		0x31: Instruction{"LD SP,i16", 12, 3, func() int { gbcpu.LDSPnn(); return 0 }},
		0x32: Instruction{"LDD (HL),A", 8, 1, func() int { gbcpu.LDDHLr(&gbcpu.Regs.a); return 0 }},
		0x33: Instruction{"INC SP", 8, 1, func() int { gbcpu.INCSP(); return 0 }},
		0x34: Instruction{"INC (HL)", 12, 1, func() int { gbcpu.INCHL(); return 0 }},
		0x35: Instruction{"DEC (HL)", 12, 1, func() int { gbcpu.DECHL(); return 0 }},
		0x36: Instruction{"LD (HL),i8", 12, 2, func() int { gbcpu.LDHLn(); return 0 }},
		0x37: Instruction{"SCF", 4, 1, func() int { gbcpu.SCF(); return 0 }},
		0x38: Instruction{"JR C,s8", 8, 2, func() int { return gbcpu.JRCn() }},
		0x39: Instruction{"ADD HL,SP", 8, 1, func() int { gbcpu.ADDHLSP(); return 0 }},
		0x3A: Instruction{"LDD A,(HL)", 8, 1, func() int { gbcpu.LDDrHL(&gbcpu.Regs.a); return 0 }},
		0x3B: Instruction{"DEC SP", 8, 1, func() int { gbcpu.DECSP(); return 0 }},
		0x3C: Instruction{"INC A", 4, 1, func() int { gbcpu.INCr(&gbcpu.Regs.a); return 0 }},
		0x3D: Instruction{"DEC A", 4, 1, func() int { gbcpu.DECr(&gbcpu.Regs.a); return 0 }},
		0x3E: Instruction{"LD A,i8", 8, 2, func() int { gbcpu.LDrn(&gbcpu.Regs.a); return 0 }},
		0x3F: Instruction{"CCF", 4, 1, func() int { gbcpu.CCF(); return 0 }},
		0x40: Instruction{"LD B,B", 4, 1, func() int { gbcpu.LDrr(&gbcpu.Regs.b, &gbcpu.Regs.b); return 0 }},
		0x41: Instruction{"LD B,C", 4, 1, func() int { gbcpu.LDrr(&gbcpu.Regs.b, &gbcpu.Regs.c); return 0 }},
		0x42: Instruction{"LD B,D", 4, 1, func() int { gbcpu.LDrr(&gbcpu.Regs.b, &gbcpu.Regs.d); return 0 }},
		0x43: Instruction{"LD B,E", 4, 1, func() int { gbcpu.LDrr(&gbcpu.Regs.b, &gbcpu.Regs.e); return 0 }},
		0x44: Instruction{"LD B,H", 4, 1, func() int { gbcpu.LDrr(&gbcpu.Regs.b, &gbcpu.Regs.h); return 0 }},
		0x45: Instruction{"LD B,L", 4, 1, func() int { gbcpu.LDrr(&gbcpu.Regs.b, &gbcpu.Regs.l); return 0 }},
		0x46: Instruction{"LD B,(HL)", 8, 1, func() int { gbcpu.LDraa(&gbcpu.Regs.b, &gbcpu.Regs.h, &gbcpu.Regs.l); return 0 }},
		0x47: Instruction{"LD B,A", 4, 1, func() int { gbcpu.LDrr(&gbcpu.Regs.b, &gbcpu.Regs.a); return 0 }},
		0x48: Instruction{"LD C,B", 4, 1, func() int { gbcpu.LDrr(&gbcpu.Regs.c, &gbcpu.Regs.b); return 0 }},
		0x49: Instruction{"LD C,C", 4, 1, func() int { gbcpu.LDrr(&gbcpu.Regs.c, &gbcpu.Regs.c); return 0 }},
		0x4A: Instruction{"LD C,D", 4, 1, func() int { gbcpu.LDrr(&gbcpu.Regs.c, &gbcpu.Regs.d); return 0 }},
		0x4B: Instruction{"LD C,E", 4, 1, func() int { gbcpu.LDrr(&gbcpu.Regs.c, &gbcpu.Regs.e); return 0 }},
		0x4C: Instruction{"LD C,H", 4, 1, func() int { gbcpu.LDrr(&gbcpu.Regs.c, &gbcpu.Regs.h); return 0 }},
		0x4D: Instruction{"LD C,L", 4, 1, func() int { gbcpu.LDrr(&gbcpu.Regs.c, &gbcpu.Regs.l); return 0 }},
		0x4E: Instruction{"LD C,(HL)", 8, 1, func() int { gbcpu.LDraa(&gbcpu.Regs.c, &gbcpu.Regs.h, &gbcpu.Regs.l); return 0 }},
		0x4F: Instruction{"LD C,A", 4, 1, func() int { gbcpu.LDrr(&gbcpu.Regs.c, &gbcpu.Regs.a); return 0 }},
		0x50: Instruction{"LD D,B", 4, 1, func() int { gbcpu.LDrr(&gbcpu.Regs.d, &gbcpu.Regs.b); return 0 }},
		0x51: Instruction{"LD D,C", 4, 1, func() int { gbcpu.LDrr(&gbcpu.Regs.d, &gbcpu.Regs.c); return 0 }},
		0x52: Instruction{"LD D,D", 4, 1, func() int { gbcpu.LDrr(&gbcpu.Regs.d, &gbcpu.Regs.d); return 0 }},
		0x53: Instruction{"LD D,E", 4, 1, func() int { gbcpu.LDrr(&gbcpu.Regs.d, &gbcpu.Regs.e); return 0 }},
		0x54: Instruction{"LD D,H", 4, 1, func() int { gbcpu.LDrr(&gbcpu.Regs.d, &gbcpu.Regs.h); return 0 }},
		0x55: Instruction{"LD D,L", 4, 1, func() int { gbcpu.LDrr(&gbcpu.Regs.d, &gbcpu.Regs.l); return 0 }},
		0x56: Instruction{"LD D,(HL)", 8, 1, func() int { gbcpu.LDraa(&gbcpu.Regs.d, &gbcpu.Regs.h, &gbcpu.Regs.l); return 0 }},
		0x57: Instruction{"LD D,A", 4, 1, func() int { gbcpu.LDrr(&gbcpu.Regs.d, &gbcpu.Regs.a); return 0 }},
		0x58: Instruction{"LD E,B", 4, 1, func() int { gbcpu.LDrr(&gbcpu.Regs.e, &gbcpu.Regs.b); return 0 }},
		0x59: Instruction{"LD E,C", 4, 1, func() int { gbcpu.LDrr(&gbcpu.Regs.e, &gbcpu.Regs.c); return 0 }},
		0x5A: Instruction{"LD E,D", 4, 1, func() int { gbcpu.LDrr(&gbcpu.Regs.e, &gbcpu.Regs.d); return 0 }},
		0x5B: Instruction{"LD E,E", 4, 1, func() int { gbcpu.LDrr(&gbcpu.Regs.e, &gbcpu.Regs.e); return 0 }},
		0x5C: Instruction{"LD E,H", 4, 1, func() int { gbcpu.LDrr(&gbcpu.Regs.e, &gbcpu.Regs.h); return 0 }},
		0x5D: Instruction{"LD E,L", 4, 1, func() int { gbcpu.LDrr(&gbcpu.Regs.e, &gbcpu.Regs.l); return 0 }},
		0x5E: Instruction{"LD E,(HL)", 8, 1, func() int { gbcpu.LDraa(&gbcpu.Regs.e, &gbcpu.Regs.h, &gbcpu.Regs.l); return 0 }},
		0x5F: Instruction{"LD E,A", 4, 1, func() int { gbcpu.LDrr(&gbcpu.Regs.e, &gbcpu.Regs.a); return 0 }},
		0x60: Instruction{"LD H,B", 4, 1, func() int { gbcpu.LDrr(&gbcpu.Regs.h, &gbcpu.Regs.b); return 0 }},
		0x61: Instruction{"LD H,C", 4, 1, func() int { gbcpu.LDrr(&gbcpu.Regs.h, &gbcpu.Regs.c); return 0 }},
		0x62: Instruction{"LD H,D", 4, 1, func() int { gbcpu.LDrr(&gbcpu.Regs.h, &gbcpu.Regs.d); return 0 }},
		0x63: Instruction{"LD H,E", 4, 1, func() int { gbcpu.LDrr(&gbcpu.Regs.h, &gbcpu.Regs.e); return 0 }},
		0x64: Instruction{"LD H,H", 4, 1, func() int { gbcpu.LDrr(&gbcpu.Regs.h, &gbcpu.Regs.h); return 0 }},
		0x65: Instruction{"LD H,L", 4, 1, func() int { gbcpu.LDrr(&gbcpu.Regs.h, &gbcpu.Regs.l); return 0 }},
		0x66: Instruction{"LD H,(HL)", 8, 1, func() int { gbcpu.LDraa(&gbcpu.Regs.h, &gbcpu.Regs.h, &gbcpu.Regs.l); return 0 }},
		0x67: Instruction{"LD H,A", 4, 1, func() int { gbcpu.LDrr(&gbcpu.Regs.h, &gbcpu.Regs.a); return 0 }},
		0x68: Instruction{"LD L,B", 4, 1, func() int { gbcpu.LDrr(&gbcpu.Regs.l, &gbcpu.Regs.b); return 0 }},
		0x69: Instruction{"LD L,C", 4, 1, func() int { gbcpu.LDrr(&gbcpu.Regs.l, &gbcpu.Regs.c); return 0 }},
		0x6A: Instruction{"LD L,D", 4, 1, func() int { gbcpu.LDrr(&gbcpu.Regs.l, &gbcpu.Regs.d); return 0 }},
		0x6B: Instruction{"LD L,E", 4, 1, func() int { gbcpu.LDrr(&gbcpu.Regs.l, &gbcpu.Regs.e); return 0 }},
		0x6C: Instruction{"LD L,H", 4, 1, func() int { gbcpu.LDrr(&gbcpu.Regs.l, &gbcpu.Regs.h); return 0 }},
		0x6D: Instruction{"LD L,L", 4, 1, func() int { gbcpu.LDrr(&gbcpu.Regs.l, &gbcpu.Regs.l); return 0 }},
		0x6E: Instruction{"LD L,(HL)", 8, 1, func() int { gbcpu.LDraa(&gbcpu.Regs.l, &gbcpu.Regs.h, &gbcpu.Regs.l); return 0 }},
		0x6F: Instruction{"LD L,A", 4, 1, func() int { gbcpu.LDrr(&gbcpu.Regs.l, &gbcpu.Regs.a); return 0 }},
		0x70: Instruction{"LD (HL),B", 8, 1, func() int { gbcpu.LDaar(&gbcpu.Regs.h, &gbcpu.Regs.l, &gbcpu.Regs.b); return 0 }},
		0x71: Instruction{"LD (HL),C", 8, 1, func() int { gbcpu.LDaar(&gbcpu.Regs.h, &gbcpu.Regs.l, &gbcpu.Regs.c); return 0 }},
		0x72: Instruction{"LD (HL),D", 8, 1, func() int { gbcpu.LDaar(&gbcpu.Regs.h, &gbcpu.Regs.l, &gbcpu.Regs.d); return 0 }},
		0x73: Instruction{"LD (HL),E", 8, 1, func() int { gbcpu.LDaar(&gbcpu.Regs.h, &gbcpu.Regs.l, &gbcpu.Regs.e); return 0 }},
		0x74: Instruction{"LD (HL),H", 8, 1, func() int { gbcpu.LDaar(&gbcpu.Regs.h, &gbcpu.Regs.l, &gbcpu.Regs.h); return 0 }},
		0x75: Instruction{"LD (HL),L", 8, 1, func() int { gbcpu.LDaar(&gbcpu.Regs.h, &gbcpu.Regs.l, &gbcpu.Regs.l); return 0 }},
		0x76: Instruction{"HALT", 4, 1, func() int { gbcpu.HALT(); return 0 }},
		0x77: Instruction{"LD (HL),A", 8, 1, func() int { gbcpu.LDaar(&gbcpu.Regs.h, &gbcpu.Regs.l, &gbcpu.Regs.a); return 0 }},
		0x78: Instruction{"LD A,B", 4, 1, func() int { gbcpu.LDrr(&gbcpu.Regs.a, &gbcpu.Regs.b); return 0 }},
		0x79: Instruction{"LD A,C", 4, 1, func() int { gbcpu.LDrr(&gbcpu.Regs.a, &gbcpu.Regs.c); return 0 }},
		0x7A: Instruction{"LD A,D", 4, 1, func() int { gbcpu.LDrr(&gbcpu.Regs.a, &gbcpu.Regs.d); return 0 }},
		0x7B: Instruction{"LD A,E", 4, 1, func() int { gbcpu.LDrr(&gbcpu.Regs.a, &gbcpu.Regs.e); return 0 }},
		0x7C: Instruction{"LD A,H", 4, 1, func() int { gbcpu.LDrr(&gbcpu.Regs.a, &gbcpu.Regs.h); return 0 }},
		0x7D: Instruction{"LD A,L", 4, 1, func() int { gbcpu.LDrr(&gbcpu.Regs.a, &gbcpu.Regs.l); return 0 }},
		0x7E: Instruction{"LD A,(HL)", 8, 1, func() int { gbcpu.LDraa(&gbcpu.Regs.a, &gbcpu.Regs.h, &gbcpu.Regs.l); return 0 }},
		0x7F: Instruction{"LD A,A", 4, 1, func() int { gbcpu.LDrr(&gbcpu.Regs.a, &gbcpu.Regs.a); return 0 }},
		0x80: Instruction{"ADD A,B", 4, 1, func() int { gbcpu.ADDrr(&gbcpu.Regs.a, &gbcpu.Regs.b); return 0 }},
		0x81: Instruction{"ADD A,C", 4, 1, func() int { gbcpu.ADDrr(&gbcpu.Regs.a, &gbcpu.Regs.c); return 0 }},
		0x82: Instruction{"ADD A,D", 4, 1, func() int { gbcpu.ADDrr(&gbcpu.Regs.a, &gbcpu.Regs.d); return 0 }},
		0x83: Instruction{"ADD A,E", 4, 1, func() int { gbcpu.ADDrr(&gbcpu.Regs.a, &gbcpu.Regs.e); return 0 }},
		0x84: Instruction{"ADD A,H", 4, 1, func() int { gbcpu.ADDrr(&gbcpu.Regs.a, &gbcpu.Regs.h); return 0 }},
		0x85: Instruction{"ADD A,L", 4, 1, func() int { gbcpu.ADDrr(&gbcpu.Regs.a, &gbcpu.Regs.l); return 0 }},
		0x86: Instruction{"ADD A,(HL)", 8, 1, func() int { gbcpu.ADDAHL(); return 0 }},
		0x87: Instruction{"ADD A,A", 4, 1, func() int { gbcpu.ADDrr(&gbcpu.Regs.a, &gbcpu.Regs.a); return 0 }},
		0x88: Instruction{"ADC A,B", 4, 1, func() int { gbcpu.ADCrr(&gbcpu.Regs.a, &gbcpu.Regs.b); return 0 }},
		0x89: Instruction{"ADC A,C", 4, 1, func() int { gbcpu.ADCrr(&gbcpu.Regs.a, &gbcpu.Regs.c); return 0 }},
		0x8A: Instruction{"ADC A,D", 4, 1, func() int { gbcpu.ADCrr(&gbcpu.Regs.a, &gbcpu.Regs.d); return 0 }},
		0x8B: Instruction{"ADC A,E", 4, 1, func() int { gbcpu.ADCrr(&gbcpu.Regs.a, &gbcpu.Regs.e); return 0 }},
		0x8C: Instruction{"ADC A,H", 4, 1, func() int { gbcpu.ADCrr(&gbcpu.Regs.a, &gbcpu.Regs.h); return 0 }},
		0x8D: Instruction{"ADC A,L", 4, 1, func() int { gbcpu.ADCrr(&gbcpu.Regs.a, &gbcpu.Regs.l); return 0 }},
		0x8E: Instruction{"ADC A,(HL)", 8, 1, func() int { gbcpu.ADCAHL(); return 0 }},
		0x8F: Instruction{"ADC A,A", 4, 1, func() int { gbcpu.ADCrr(&gbcpu.Regs.a, &gbcpu.Regs.a); return 0 }},
		0x90: Instruction{"SUB B", 4, 1, func() int { gbcpu.SUBr(&gbcpu.Regs.b); return 0 }},
		0x91: Instruction{"SUB C", 4, 1, func() int { gbcpu.SUBr(&gbcpu.Regs.c); return 0 }},
		0x92: Instruction{"SUB D", 4, 1, func() int { gbcpu.SUBr(&gbcpu.Regs.d); return 0 }},
		0x93: Instruction{"SUB E", 4, 1, func() int { gbcpu.SUBr(&gbcpu.Regs.e); return 0 }},
		0x94: Instruction{"SUB H", 4, 1, func() int { gbcpu.SUBr(&gbcpu.Regs.h); return 0 }},
		0x95: Instruction{"SUB L", 4, 1, func() int { gbcpu.SUBr(&gbcpu.Regs.l); return 0 }},
		0x96: Instruction{"SUB (HL)", 8, 1, func() int { gbcpu.SUBHL(); return 0 }},
		0x97: Instruction{"SUB A", 4, 1, func() int { gbcpu.SUBr(&gbcpu.Regs.a); return 0 }},
		0x98: Instruction{"SBC A,B", 4, 1, func() int { gbcpu.SBCrr(&gbcpu.Regs.a, &gbcpu.Regs.b); return 0 }},
		0x99: Instruction{"SBC A,C", 4, 1, func() int { gbcpu.SBCrr(&gbcpu.Regs.a, &gbcpu.Regs.c); return 0 }},
		0x9A: Instruction{"SBC A,D", 4, 1, func() int { gbcpu.SBCrr(&gbcpu.Regs.a, &gbcpu.Regs.d); return 0 }},
		0x9B: Instruction{"SBC A,E", 4, 1, func() int { gbcpu.SBCrr(&gbcpu.Regs.a, &gbcpu.Regs.e); return 0 }},
		0x9C: Instruction{"SBC A,H", 4, 1, func() int { gbcpu.SBCrr(&gbcpu.Regs.a, &gbcpu.Regs.h); return 0 }},
		0x9D: Instruction{"SBC A,L", 4, 1, func() int { gbcpu.SBCrr(&gbcpu.Regs.a, &gbcpu.Regs.l); return 0 }},
		0x9E: Instruction{"SBC A,(HL)", 8, 1, func() int { gbcpu.SBCAHL(); return 0 }},
		0x9F: Instruction{"SBC A,A", 4, 1, func() int { gbcpu.SBCrr(&gbcpu.Regs.a, &gbcpu.Regs.a); return 0 }},
		0xA0: Instruction{"AND B", 4, 1, func() int { gbcpu.ANDr(&gbcpu.Regs.b); return 0 }},
		0xA1: Instruction{"AND C", 4, 1, func() int { gbcpu.ANDr(&gbcpu.Regs.c); return 0 }},
		0xA2: Instruction{"AND D", 4, 1, func() int { gbcpu.ANDr(&gbcpu.Regs.d); return 0 }},
		0xA3: Instruction{"AND E", 4, 1, func() int { gbcpu.ANDr(&gbcpu.Regs.e); return 0 }},
		0xA4: Instruction{"AND H", 4, 1, func() int { gbcpu.ANDr(&gbcpu.Regs.h); return 0 }},
		0xA5: Instruction{"AND L", 4, 1, func() int { gbcpu.ANDr(&gbcpu.Regs.l); return 0 }},
		0xA6: Instruction{"AND (HL)", 8, 1, func() int { gbcpu.ANDHL(); return 0 }},
		0xA7: Instruction{"AND A", 4, 1, func() int { gbcpu.ANDr(&gbcpu.Regs.a); return 0 }},
		0xA8: Instruction{"XOR B", 4, 1, func() int { gbcpu.XORr(&gbcpu.Regs.b); return 0 }},
		0xA9: Instruction{"XOR C", 4, 1, func() int { gbcpu.XORr(&gbcpu.Regs.c); return 0 }},
		0xAA: Instruction{"XOR D", 4, 1, func() int { gbcpu.XORr(&gbcpu.Regs.d); return 0 }},
		0xAB: Instruction{"XOR E", 4, 1, func() int { gbcpu.XORr(&gbcpu.Regs.e); return 0 }},
		0xAC: Instruction{"XOR H", 4, 1, func() int { gbcpu.XORr(&gbcpu.Regs.h); return 0 }},
		0xAD: Instruction{"XOR L", 4, 1, func() int { gbcpu.XORr(&gbcpu.Regs.l); return 0 }},
		0xAE: Instruction{"XOR (HL)", 8, 1, func() int { gbcpu.XORaa(&gbcpu.Regs.h, &gbcpu.Regs.l); return 0 }},
		0xAF: Instruction{"XOR A", 4, 1, func() int { gbcpu.XORr(&gbcpu.Regs.a); return 0 }},
		0xB0: Instruction{"OR B", 4, 1, func() int { gbcpu.ORr(&gbcpu.Regs.b); return 0 }},
		0xB1: Instruction{"OR C", 4, 1, func() int { gbcpu.ORr(&gbcpu.Regs.c); return 0 }},
		0xB2: Instruction{"OR D", 4, 1, func() int { gbcpu.ORr(&gbcpu.Regs.d); return 0 }},
		0xB3: Instruction{"OR E", 4, 1, func() int { gbcpu.ORr(&gbcpu.Regs.e); return 0 }},
		0xB4: Instruction{"OR H", 4, 1, func() int { gbcpu.ORr(&gbcpu.Regs.h); return 0 }},
		0xB5: Instruction{"OR L", 4, 1, func() int { gbcpu.ORr(&gbcpu.Regs.l); return 0 }},
		0xB6: Instruction{"OR (HL)", 8, 1, func() int { gbcpu.ORHL(); return 0 }},
		0xB7: Instruction{"OR A", 4, 1, func() int { gbcpu.ORr(&gbcpu.Regs.a); return 0 }},
		0xB8: Instruction{"CP B", 4, 1, func() int { gbcpu.CPr(&gbcpu.Regs.b); return 0 }},
		0xB9: Instruction{"CP C", 4, 1, func() int { gbcpu.CPr(&gbcpu.Regs.c); return 0 }},
		0xBA: Instruction{"CP D", 4, 1, func() int { gbcpu.CPr(&gbcpu.Regs.d); return 0 }},
		0xBB: Instruction{"CP E", 4, 1, func() int { gbcpu.CPr(&gbcpu.Regs.e); return 0 }},
		0xBC: Instruction{"CP H", 4, 1, func() int { gbcpu.CPr(&gbcpu.Regs.h); return 0 }},
		0xBD: Instruction{"CP L", 4, 1, func() int { gbcpu.CPr(&gbcpu.Regs.l); return 0 }},
		0xBE: Instruction{"CP (HL)", 8, 1, func() int { gbcpu.CPaa(&gbcpu.Regs.h, &gbcpu.Regs.l); return 0 }},
		0xBF: Instruction{"CP A", 4, 1, func() int { gbcpu.CPr(&gbcpu.Regs.a); return 0 }},
		0xC0: Instruction{"RET NZ", 8, 1, func() int { return gbcpu.RETNZ() }},
		0xC1: Instruction{"POP BC", 12, 1, func() int { gbcpu.POPrr(&gbcpu.Regs.b, &gbcpu.Regs.c); return 0 }},
		0xC2: Instruction{"JP NZ,a16", 12, 3, func() int { return gbcpu.JPNZaa() }},
		0xC3: Instruction{"JP a16", 16, 3, func() int { gbcpu.JPaa(); return 0 }},
		0xC4: Instruction{"CALL NZ,a16", 12, 3, func() int { return gbcpu.CALLNZaa() }},
		0xC5: Instruction{"PUSH BC", 16, 1, func() int { gbcpu.PUSHrr(&gbcpu.Regs.b, &gbcpu.Regs.c); return 0 }},
		0xC6: Instruction{"ADD A,i8", 8, 2, func() int { gbcpu.ADDAn(); return 0 }},
		0xC7: Instruction{"RST 00", 16, 1, func() int { gbcpu.RST(0x00); return 0 }},
		0xC8: Instruction{"RET Z", 8, 1, func() int { return gbcpu.RETZ() }},
		0xC9: Instruction{"RET", 16, 1, func() int { gbcpu.RET(); return 0 }},
		0xCA: Instruction{"JP Z,a16", 12, 3, func() int { return gbcpu.JPZaa() }},
		// CB Prefix takes 4 cycles to execute alone, but that overhead is
		// included in the total cycles for the CB instructions
		0xCB: Instruction{"PREFIX CB", 0, 2, func() int { return gbcpu.CB() }},
		0xCC: Instruction{"CALL Z,a16", 12, 3, func() int { return gbcpu.CALLZaa() }},
		0xCD: Instruction{"CALL a16", 24, 3, func() int { gbcpu.CALLaa(); return 0 }},
		0xCE: Instruction{"ADC A,i8", 8, 2, func() int { gbcpu.ADCAn(); return 0 }},
		0xCF: Instruction{"RST 08H", 16, 1, func() int { gbcpu.RST(0x08); return 0 }},
		0xD0: Instruction{"RET NC", 8, 1, func() int { return gbcpu.RETNC() }},
		0xD1: Instruction{"POP DE", 12, 1, func() int { gbcpu.POPrr(&gbcpu.Regs.d, &gbcpu.Regs.e); return 0 }},
		0xD2: Instruction{"JP NC,a16", 12, 3, func() int { return gbcpu.JPNCaa() }},
		// 0xD3: no corresponding instruction
		0xD4: Instruction{"CALL NC,a16", 12, 3, func() int { return gbcpu.CALLNCaa() }},
		0xD5: Instruction{"PUSH DE", 16, 1, func() int { gbcpu.PUSHrr(&gbcpu.Regs.d, &gbcpu.Regs.e); return 0 }},
		0xD6: Instruction{"SUB i8", 8, 2, func() int { gbcpu.SUBn(); return 0 }},
		0xD7: Instruction{"RST 10H", 16, 1, func() int { gbcpu.RST(0x10); return 0 }},
		0xD8: Instruction{"RET C", 8, 1, func() int { return gbcpu.RETC() }},
		0xD9: Instruction{"RETI", 16, 1, func() int { gbcpu.RETI(); return 0 }},
		0xDA: Instruction{"JP C,a16", 12, 3, func() int { return gbcpu.JPCaa() }},
		// 0xDB: no corresponding instruction
		0xDC: Instruction{"CALL C,a16", 12, 3, func() int { return gbcpu.CALLCaa() }},
		// 0xDD: no corresponding instruction
		0xDE: Instruction{"SBC A,i8", 8, 2, func() int { gbcpu.SBCAn(); return 0 }},
		0xDF: Instruction{"RST 18H", 16, 1, func() int { gbcpu.RST(0x18); return 0 }},
		0xE0: Instruction{"LD ($FF00+a8),A", 12, 2, func() int { gbcpu.LDffnA(); return 0 }},
		0xE1: Instruction{"POP HL", 12, 1, func() int { gbcpu.POPrr(&gbcpu.Regs.h, &gbcpu.Regs.l); return 0 }},
		0xE2: Instruction{"LD ($FF00+C),A", 8, 1, func() int { gbcpu.LDffCA(); return 0 }},
		// 0xE3: no corresponding instruction
		// 0xE4: no corresponding instruction
		0xE5: Instruction{"PUSH HL", 16, 1, func() int { gbcpu.PUSHrr(&gbcpu.Regs.h, &gbcpu.Regs.l); return 0 }},
		0xE6: Instruction{"AND i8", 8, 2, func() int { gbcpu.ANDn(); return 0 }},
		0xE7: Instruction{"RST 20H", 16, 1, func() int { gbcpu.RST(0x20); return 0 }},
		0xE8: Instruction{"ADD SP,s8", 16, 2, func() int { gbcpu.ADDSPs(); return 0 }},
		0xE9: Instruction{"JP (HL)", 4, 1, func() int { gbcpu.JPHL(); return 0 }},
		0xEA: Instruction{"LD (a16),A", 16, 3, func() int { gbcpu.LDaaA(&gbcpu.Regs.a); return 0 }},
		// 0xEB: no corresponding instruction
		// 0xEC: no corresponding instruction
		// 0xED: no corresponding instruction
		0xEE: Instruction{"XOR i8", 8, 2, func() int { gbcpu.XORn(); return 0 }},
		0xEF: Instruction{"RST 28", 16, 1, func() int { gbcpu.RST(0x28); return 0 }},
		0xF0: Instruction{"LD A,($FF00+a8)", 12, 2, func() int { gbcpu.LDAffn(); return 0 }},
		0xF1: Instruction{"POP AF", 12, 1, func() int { gbcpu.POPrr(&gbcpu.Regs.a, &gbcpu.Regs.f); return 0 }},
		0xF2: Instruction{"LD A,($FF00+C)", 8, 1, func() int { gbcpu.LDAffC(); return 0 }},
		0xF3: Instruction{"DI", 4, 1, func() int { gbcpu.DI(); return 0 }},
		// 0xF4: no corresponding instruction
		0xF5: Instruction{"PUSH AF", 16, 1, func() int { gbcpu.PUSHrr(&gbcpu.Regs.a, &gbcpu.Regs.f); return 0 }},
		0xF6: Instruction{"OR i8", 8, 2, func() int { gbcpu.ORn(); return 0 }},
		0xF7: Instruction{"RST 30", 16, 1, func() int { gbcpu.RST(0x30); return 0 }},
		0xF8: Instruction{"LD HL,SP+s8", 12, 2, func() int { gbcpu.LDHLSPs(); return 0 }},
		0xF9: Instruction{"LD SP,HL", 8, 1, func() int { gbcpu.LDSPHL(); return 0 }},
		0xFA: Instruction{"LD A,(a16)", 16, 3, func() int { gbcpu.LDAaa(&gbcpu.Regs.a); return 0 }},
		0xFB: Instruction{"EI", 4, 1, func() int { gbcpu.EI(); return 0 }},
		// 0xFC: no corresponding instruction
		// 0xFD: no corresponding instruction
		0xFE: Instruction{"CP i8", 8, 2, func() int { gbcpu.CPn(); return 0 }},
		0xFF: Instruction{"RST 38H", 16, 1, func() int { gbcpu.RST(0x38); return 0 }}}

	// CB prefixed instructions
	// CB is the prefix byte. Like the Z80, the Sharp LR35902 will
	// look up a CB prefixed instruction in a different instruction bank
	// More info: http://www.z80.info/decoding.htm
	gbcpu.InstrsCB = map[byte]Instruction{
		0x00: Instruction{"RLC B", 8, 1, func() int { gbcpu.RLCr(&gbcpu.Regs.b); return 0 }},
		0x01: Instruction{"RLC C", 8, 1, func() int { gbcpu.RLCr(&gbcpu.Regs.c); return 0 }},
		0x02: Instruction{"RLC D", 8, 1, func() int { gbcpu.RLCr(&gbcpu.Regs.d); return 0 }},
		0x03: Instruction{"RLC E", 8, 1, func() int { gbcpu.RLCr(&gbcpu.Regs.e); return 0 }},
		0x04: Instruction{"RLC H", 8, 1, func() int { gbcpu.RLCr(&gbcpu.Regs.h); return 0 }},
		0x05: Instruction{"RLC L", 8, 1, func() int { gbcpu.RLCr(&gbcpu.Regs.l); return 0 }},
		0x06: Instruction{"RLC (HL)", 16, 1, func() int { gbcpu.RLCHL(); return 0 }},
		0x07: Instruction{"RLC A", 8, 1, func() int { gbcpu.RLCr(&gbcpu.Regs.a); return 0 }},
		0x08: Instruction{"RRC B", 8, 1, func() int { gbcpu.RRCr(&gbcpu.Regs.b); return 0 }},
		0x09: Instruction{"RRC C", 8, 1, func() int { gbcpu.RRCr(&gbcpu.Regs.c); return 0 }},
		0x0A: Instruction{"RRC D", 8, 1, func() int { gbcpu.RRCr(&gbcpu.Regs.d); return 0 }},
		0x0B: Instruction{"RRC E", 8, 1, func() int { gbcpu.RRCr(&gbcpu.Regs.e); return 0 }},
		0x0C: Instruction{"RRC H", 8, 1, func() int { gbcpu.RRCr(&gbcpu.Regs.h); return 0 }},
		0x0D: Instruction{"RRC L", 8, 1, func() int { gbcpu.RRCr(&gbcpu.Regs.l); return 0 }},
		0x0E: Instruction{"RRC (HL)", 16, 1, func() int { gbcpu.RRCHL(); return 0 }},
		0x0F: Instruction{"RRC A", 8, 1, func() int { gbcpu.RRCr(&gbcpu.Regs.a); return 0 }},

		0x10: Instruction{"RL B", 8, 1, func() int { gbcpu.RLr(&gbcpu.Regs.b); return 0 }},
		0x11: Instruction{"RL C", 8, 1, func() int { gbcpu.RLr(&gbcpu.Regs.c); return 0 }},
		0x12: Instruction{"RL D", 8, 1, func() int { gbcpu.RLr(&gbcpu.Regs.d); return 0 }},
		0x13: Instruction{"RL E", 8, 1, func() int { gbcpu.RLr(&gbcpu.Regs.e); return 0 }},
		0x14: Instruction{"RL H", 8, 1, func() int { gbcpu.RLr(&gbcpu.Regs.h); return 0 }},
		0x15: Instruction{"RL L", 8, 1, func() int { gbcpu.RLr(&gbcpu.Regs.l); return 0 }},
		0x16: Instruction{"RL (HL)", 16, 1, func() int { gbcpu.RLHL(); return 0 }},
		0x17: Instruction{"RL A", 8, 1, func() int { gbcpu.RLr(&gbcpu.Regs.a); return 0 }},
		0x18: Instruction{"RR B", 8, 1, func() int { gbcpu.RRr(&gbcpu.Regs.b); return 0 }},
		0x19: Instruction{"RR C", 8, 1, func() int { gbcpu.RRr(&gbcpu.Regs.c); return 0 }},
		0x1A: Instruction{"RR D", 8, 1, func() int { gbcpu.RRr(&gbcpu.Regs.d); return 0 }},
		0x1B: Instruction{"RR E", 8, 1, func() int { gbcpu.RRr(&gbcpu.Regs.e); return 0 }},
		0x1C: Instruction{"RR H", 8, 1, func() int { gbcpu.RRr(&gbcpu.Regs.h); return 0 }},
		0x1D: Instruction{"RR L", 8, 1, func() int { gbcpu.RRr(&gbcpu.Regs.l); return 0 }},
		0x1E: Instruction{"RR (HL)", 16, 1, func() int { gbcpu.RRHL(); return 0 }},
		0x1F: Instruction{"RR A", 8, 1, func() int { gbcpu.RRr(&gbcpu.Regs.a); return 0 }},

		0x20: Instruction{"SLA B", 8, 1, func() int { gbcpu.SLAr(&gbcpu.Regs.b); return 0 }},
		0x21: Instruction{"SLA C", 8, 1, func() int { gbcpu.SLAr(&gbcpu.Regs.c); return 0 }},
		0x22: Instruction{"SLA D", 8, 1, func() int { gbcpu.SLAr(&gbcpu.Regs.d); return 0 }},
		0x23: Instruction{"SLA E", 8, 1, func() int { gbcpu.SLAr(&gbcpu.Regs.e); return 0 }},
		0x24: Instruction{"SLA H", 8, 1, func() int { gbcpu.SLAr(&gbcpu.Regs.h); return 0 }},
		0x25: Instruction{"SLA L", 8, 1, func() int { gbcpu.SLAr(&gbcpu.Regs.l); return 0 }},
		0x26: Instruction{"SLA (HL)", 16, 1, func() int { gbcpu.SLAHL(); return 0 }},
		0x27: Instruction{"SLA A", 8, 1, func() int { gbcpu.SLAr(&gbcpu.Regs.a); return 0 }},
		0x28: Instruction{"SRA B", 8, 1, func() int { gbcpu.SRAr(&gbcpu.Regs.b); return 0 }},
		0x29: Instruction{"SRA C", 8, 1, func() int { gbcpu.SRAr(&gbcpu.Regs.c); return 0 }},
		0x2A: Instruction{"SRA D", 8, 1, func() int { gbcpu.SRAr(&gbcpu.Regs.d); return 0 }},
		0x2B: Instruction{"SRA E", 8, 1, func() int { gbcpu.SRAr(&gbcpu.Regs.e); return 0 }},
		0x2C: Instruction{"SRA H", 8, 1, func() int { gbcpu.SRAr(&gbcpu.Regs.h); return 0 }},
		0x2D: Instruction{"SRA L", 8, 1, func() int { gbcpu.SRAr(&gbcpu.Regs.l); return 0 }},
		0x2E: Instruction{"SRA (HL)", 16, 1, func() int { gbcpu.SRAHL(); return 0 }},
		0x2F: Instruction{"SRA A", 8, 1, func() int { gbcpu.SRAr(&gbcpu.Regs.a); return 0 }},

		0x30: Instruction{"SWAP B", 8, 1, func() int { gbcpu.SWAPr(&gbcpu.Regs.b); return 0 }},
		0x31: Instruction{"SWAP C", 8, 1, func() int { gbcpu.SWAPr(&gbcpu.Regs.c); return 0 }},
		0x32: Instruction{"SWAP D", 8, 1, func() int { gbcpu.SWAPr(&gbcpu.Regs.d); return 0 }},
		0x33: Instruction{"SWAP E", 8, 1, func() int { gbcpu.SWAPr(&gbcpu.Regs.e); return 0 }},
		0x34: Instruction{"SWAP H", 8, 1, func() int { gbcpu.SWAPr(&gbcpu.Regs.h); return 0 }},
		0x35: Instruction{"SWAP L", 8, 1, func() int { gbcpu.SWAPr(&gbcpu.Regs.l); return 0 }},
		0x36: Instruction{"SWAP (HL)", 16, 1, func() int { gbcpu.SWAPHL(); return 0 }},
		0x37: Instruction{"SWAP A", 8, 1, func() int { gbcpu.SWAPr(&gbcpu.Regs.a); return 0 }},
		0x38: Instruction{"SRL B", 8, 1, func() int { gbcpu.SRLr(&gbcpu.Regs.b); return 0 }},
		0x39: Instruction{"SRL C", 8, 1, func() int { gbcpu.SRLr(&gbcpu.Regs.c); return 0 }},
		0x3A: Instruction{"SRL D", 8, 1, func() int { gbcpu.SRLr(&gbcpu.Regs.d); return 0 }},
		0x3B: Instruction{"SRL E", 8, 1, func() int { gbcpu.SRLr(&gbcpu.Regs.e); return 0 }},
		0x3C: Instruction{"SRL H", 8, 1, func() int { gbcpu.SRLr(&gbcpu.Regs.h); return 0 }},
		0x3D: Instruction{"SRL L", 8, 1, func() int { gbcpu.SRLr(&gbcpu.Regs.l); return 0 }},
		0x3E: Instruction{"SRL (HL)", 16, 1, func() int { gbcpu.SRLHL(); return 0 }},
		0x3F: Instruction{"SRL A", 8, 1, func() int { gbcpu.SRLr(&gbcpu.Regs.a); return 0 }},

		0x40: Instruction{"BIT 0,B", 8, 1, func() int { gbcpu.BITnr(0, &gbcpu.Regs.b); return 0 }},
		0x41: Instruction{"BIT 0,C", 8, 1, func() int { gbcpu.BITnr(0, &gbcpu.Regs.c); return 0 }},
		0x42: Instruction{"BIT 0,D", 8, 1, func() int { gbcpu.BITnr(0, &gbcpu.Regs.d); return 0 }},
		0x43: Instruction{"BIT 0,E", 8, 1, func() int { gbcpu.BITnr(0, &gbcpu.Regs.e); return 0 }},
		0x44: Instruction{"BIT 0,H", 8, 1, func() int { gbcpu.BITnr(0, &gbcpu.Regs.h); return 0 }},
		0x45: Instruction{"BIT 0,L", 8, 1, func() int { gbcpu.BITnr(0, &gbcpu.Regs.l); return 0 }},
		0x46: Instruction{"BIT 0,(HL)", 16, 1, func() int { gbcpu.BITHL(0); return 0 }},
		0x47: Instruction{"BIT 0,A", 8, 1, func() int { gbcpu.BITnr(0, &gbcpu.Regs.a); return 0 }},
		0x48: Instruction{"BIT 1,B", 8, 1, func() int { gbcpu.BITnr(1, &gbcpu.Regs.b); return 0 }},
		0x49: Instruction{"BIT 1,C", 8, 1, func() int { gbcpu.BITnr(1, &gbcpu.Regs.c); return 0 }},
		0x4A: Instruction{"BIT 1,D", 8, 1, func() int { gbcpu.BITnr(1, &gbcpu.Regs.d); return 0 }},
		0x4B: Instruction{"BIT 1,E", 8, 1, func() int { gbcpu.BITnr(1, &gbcpu.Regs.e); return 0 }},
		0x4C: Instruction{"BIT 1,H", 8, 1, func() int { gbcpu.BITnr(1, &gbcpu.Regs.h); return 0 }},
		0x4D: Instruction{"BIT 1,L", 8, 1, func() int { gbcpu.BITnr(1, &gbcpu.Regs.l); return 0 }},
		0x4E: Instruction{"BIT 1,(HL)", 16, 1, func() int { gbcpu.BITHL(1); return 0 }},
		0x4F: Instruction{"BIT 1,A", 8, 1, func() int { gbcpu.BITnr(1, &gbcpu.Regs.a); return 0 }},

		0x50: Instruction{"BIT 2,B", 8, 1, func() int { gbcpu.BITnr(2, &gbcpu.Regs.b); return 0 }},
		0x51: Instruction{"BIT 2,C", 8, 1, func() int { gbcpu.BITnr(2, &gbcpu.Regs.c); return 0 }},
		0x52: Instruction{"BIT 2,D", 8, 1, func() int { gbcpu.BITnr(2, &gbcpu.Regs.d); return 0 }},
		0x53: Instruction{"BIT 2,E", 8, 1, func() int { gbcpu.BITnr(2, &gbcpu.Regs.e); return 0 }},
		0x54: Instruction{"BIT 2,H", 8, 1, func() int { gbcpu.BITnr(2, &gbcpu.Regs.h); return 0 }},
		0x55: Instruction{"BIT 2,L", 8, 1, func() int { gbcpu.BITnr(2, &gbcpu.Regs.l); return 0 }},
		0x56: Instruction{"BIT 2,(HL)", 16, 1, func() int { gbcpu.BITHL(2); return 0 }},
		0x57: Instruction{"BIT 2,A", 8, 1, func() int { gbcpu.BITnr(2, &gbcpu.Regs.a); return 0 }},
		0x58: Instruction{"BIT 3,B", 8, 1, func() int { gbcpu.BITnr(3, &gbcpu.Regs.b); return 0 }},
		0x59: Instruction{"BIT 3,C", 8, 1, func() int { gbcpu.BITnr(3, &gbcpu.Regs.c); return 0 }},
		0x5A: Instruction{"BIT 3,D", 8, 1, func() int { gbcpu.BITnr(3, &gbcpu.Regs.d); return 0 }},
		0x5B: Instruction{"BIT 3,E", 8, 1, func() int { gbcpu.BITnr(3, &gbcpu.Regs.e); return 0 }},
		0x5C: Instruction{"BIT 3,H", 8, 1, func() int { gbcpu.BITnr(3, &gbcpu.Regs.h); return 0 }},
		0x5D: Instruction{"BIT 3,L", 8, 1, func() int { gbcpu.BITnr(3, &gbcpu.Regs.l); return 0 }},
		0x5E: Instruction{"BIT 3,(HL)", 16, 1, func() int { gbcpu.BITHL(3); return 0 }},
		0x5F: Instruction{"BIT 3,A", 8, 1, func() int { gbcpu.BITnr(3, &gbcpu.Regs.a); return 0 }},

		0x60: Instruction{"BIT 4,B", 8, 1, func() int { gbcpu.BITnr(4, &gbcpu.Regs.b); return 0 }},
		0x61: Instruction{"BIT 4,C", 8, 1, func() int { gbcpu.BITnr(4, &gbcpu.Regs.c); return 0 }},
		0x62: Instruction{"BIT 4,D", 8, 1, func() int { gbcpu.BITnr(4, &gbcpu.Regs.d); return 0 }},
		0x63: Instruction{"BIT 4,E", 8, 1, func() int { gbcpu.BITnr(4, &gbcpu.Regs.e); return 0 }},
		0x64: Instruction{"BIT 4,H", 8, 1, func() int { gbcpu.BITnr(4, &gbcpu.Regs.h); return 0 }},
		0x65: Instruction{"BIT 4,L", 8, 1, func() int { gbcpu.BITnr(4, &gbcpu.Regs.l); return 0 }},
		0x66: Instruction{"BIT 4,(HL)", 16, 1, func() int { gbcpu.BITHL(4); return 0 }},
		0x67: Instruction{"BIT 4,A", 8, 1, func() int { gbcpu.BITnr(4, &gbcpu.Regs.a); return 0 }},
		0x68: Instruction{"BIT 5,B", 8, 1, func() int { gbcpu.BITnr(5, &gbcpu.Regs.b); return 0 }},
		0x69: Instruction{"BIT 5,C", 8, 1, func() int { gbcpu.BITnr(5, &gbcpu.Regs.c); return 0 }},
		0x6A: Instruction{"BIT 5,D", 8, 1, func() int { gbcpu.BITnr(5, &gbcpu.Regs.d); return 0 }},
		0x6B: Instruction{"BIT 5,E", 8, 1, func() int { gbcpu.BITnr(5, &gbcpu.Regs.e); return 0 }},
		0x6C: Instruction{"BIT 5,H", 8, 1, func() int { gbcpu.BITnr(5, &gbcpu.Regs.h); return 0 }},
		0x6D: Instruction{"BIT 5,L", 8, 1, func() int { gbcpu.BITnr(5, &gbcpu.Regs.l); return 0 }},
		0x6E: Instruction{"BIT 5,(HL)", 16, 1, func() int { gbcpu.BITHL(5); return 0 }},
		0x6F: Instruction{"BIT 5,A", 8, 1, func() int { gbcpu.BITnr(5, &gbcpu.Regs.a); return 0 }},

		0x70: Instruction{"BIT 6,B", 8, 1, func() int { gbcpu.BITnr(6, &gbcpu.Regs.b); return 0 }},
		0x71: Instruction{"BIT 6,C", 8, 1, func() int { gbcpu.BITnr(6, &gbcpu.Regs.c); return 0 }},
		0x72: Instruction{"BIT 6,D", 8, 1, func() int { gbcpu.BITnr(6, &gbcpu.Regs.d); return 0 }},
		0x73: Instruction{"BIT 6,E", 8, 1, func() int { gbcpu.BITnr(6, &gbcpu.Regs.e); return 0 }},
		0x74: Instruction{"BIT 6,H", 8, 1, func() int { gbcpu.BITnr(6, &gbcpu.Regs.h); return 0 }},
		0x75: Instruction{"BIT 6,L", 8, 1, func() int { gbcpu.BITnr(6, &gbcpu.Regs.l); return 0 }},
		0x76: Instruction{"BIT 6,(HL)", 16, 1, func() int { gbcpu.BITHL(6); return 0 }},
		0x77: Instruction{"BIT 6,A", 8, 1, func() int { gbcpu.BITnr(6, &gbcpu.Regs.a); return 0 }},
		0x78: Instruction{"BIT 7,B", 8, 1, func() int { gbcpu.BITnr(7, &gbcpu.Regs.b); return 0 }},
		0x79: Instruction{"BIT 7,C", 8, 1, func() int { gbcpu.BITnr(7, &gbcpu.Regs.c); return 0 }},
		0x7A: Instruction{"BIT 7,D", 8, 1, func() int { gbcpu.BITnr(7, &gbcpu.Regs.d); return 0 }},
		0x7B: Instruction{"BIT 7,E", 8, 1, func() int { gbcpu.BITnr(7, &gbcpu.Regs.e); return 0 }},
		0x7C: Instruction{"BIT 7,H", 8, 1, func() int { gbcpu.BITnr(7, &gbcpu.Regs.h); return 0 }},
		0x7D: Instruction{"BIT 7,L", 8, 1, func() int { gbcpu.BITnr(7, &gbcpu.Regs.l); return 0 }},
		0x7E: Instruction{"BIT 7,(HL)", 16, 1, func() int { gbcpu.BITHL(7); return 0 }},
		0x7F: Instruction{"BIT 7,A", 8, 1, func() int { gbcpu.BITnr(7, &gbcpu.Regs.a); return 0 }},

		0x80: Instruction{"RES 0,B", 8, 1, func() int { gbcpu.RESnr(0, &gbcpu.Regs.b); return 0 }},
		0x81: Instruction{"RES 0,C", 8, 1, func() int { gbcpu.RESnr(0, &gbcpu.Regs.c); return 0 }},
		0x82: Instruction{"RES 0,D", 8, 1, func() int { gbcpu.RESnr(0, &gbcpu.Regs.d); return 0 }},
		0x83: Instruction{"RES 0,E", 8, 1, func() int { gbcpu.RESnr(0, &gbcpu.Regs.e); return 0 }},
		0x84: Instruction{"RES 0,H", 8, 1, func() int { gbcpu.RESnr(0, &gbcpu.Regs.h); return 0 }},
		0x85: Instruction{"RES 0,L", 8, 1, func() int { gbcpu.RESnr(0, &gbcpu.Regs.l); return 0 }},
		0x86: Instruction{"RES 0,(HL)", 16, 1, func() int { gbcpu.RESHL(0); return 0 }},
		0x87: Instruction{"RES 0,A", 8, 1, func() int { gbcpu.RESnr(0, &gbcpu.Regs.a); return 0 }},
		0x88: Instruction{"RES 1,B", 8, 1, func() int { gbcpu.RESnr(1, &gbcpu.Regs.b); return 0 }},
		0x89: Instruction{"RES 1,C", 8, 1, func() int { gbcpu.RESnr(1, &gbcpu.Regs.c); return 0 }},
		0x8A: Instruction{"RES 1,D", 8, 1, func() int { gbcpu.RESnr(1, &gbcpu.Regs.d); return 0 }},
		0x8B: Instruction{"RES 1,E", 8, 1, func() int { gbcpu.RESnr(1, &gbcpu.Regs.e); return 0 }},
		0x8C: Instruction{"RES 1,H", 8, 1, func() int { gbcpu.RESnr(1, &gbcpu.Regs.h); return 0 }},
		0x8D: Instruction{"RES 1,L", 8, 1, func() int { gbcpu.RESnr(1, &gbcpu.Regs.l); return 0 }},
		0x8E: Instruction{"RES 1,(HL)", 16, 1, func() int { gbcpu.RESHL(1); return 0 }},
		0x8F: Instruction{"RES 1,A", 8, 1, func() int { gbcpu.RESnr(1, &gbcpu.Regs.a); return 0 }},

		0x90: Instruction{"RES 2,B", 8, 1, func() int { gbcpu.RESnr(2, &gbcpu.Regs.b); return 0 }},
		0x91: Instruction{"RES 2,C", 8, 1, func() int { gbcpu.RESnr(2, &gbcpu.Regs.c); return 0 }},
		0x92: Instruction{"RES 2,D", 8, 1, func() int { gbcpu.RESnr(2, &gbcpu.Regs.d); return 0 }},
		0x93: Instruction{"RES 2,E", 8, 1, func() int { gbcpu.RESnr(2, &gbcpu.Regs.e); return 0 }},
		0x94: Instruction{"RES 2,H", 8, 1, func() int { gbcpu.RESnr(2, &gbcpu.Regs.h); return 0 }},
		0x95: Instruction{"RES 2,L", 8, 1, func() int { gbcpu.RESnr(2, &gbcpu.Regs.l); return 0 }},
		0x96: Instruction{"RES 2,(HL)", 16, 1, func() int { gbcpu.RESHL(2); return 0 }},
		0x97: Instruction{"RES 2,A", 8, 1, func() int { gbcpu.RESnr(2, &gbcpu.Regs.a); return 0 }},
		0x98: Instruction{"RES 3,B", 8, 1, func() int { gbcpu.RESnr(3, &gbcpu.Regs.b); return 0 }},
		0x99: Instruction{"RES 3,C", 8, 1, func() int { gbcpu.RESnr(3, &gbcpu.Regs.c); return 0 }},
		0x9A: Instruction{"RES 3,D", 8, 1, func() int { gbcpu.RESnr(3, &gbcpu.Regs.d); return 0 }},
		0x9B: Instruction{"RES 3,E", 8, 1, func() int { gbcpu.RESnr(3, &gbcpu.Regs.e); return 0 }},
		0x9C: Instruction{"RES 3,H", 8, 1, func() int { gbcpu.RESnr(3, &gbcpu.Regs.h); return 0 }},
		0x9D: Instruction{"RES 3,L", 8, 1, func() int { gbcpu.RESnr(3, &gbcpu.Regs.l); return 0 }},
		0x9E: Instruction{"RES 3,(HL)", 16, 1, func() int { gbcpu.RESHL(3); return 0 }},
		0x9F: Instruction{"RES 3,A", 8, 1, func() int { gbcpu.RESnr(3, &gbcpu.Regs.a); return 0 }},

		0xA0: Instruction{"RES 4,B", 8, 1, func() int { gbcpu.RESnr(4, &gbcpu.Regs.b); return 0 }},
		0xA1: Instruction{"RES 4,C", 8, 1, func() int { gbcpu.RESnr(4, &gbcpu.Regs.c); return 0 }},
		0xA2: Instruction{"RES 4,D", 8, 1, func() int { gbcpu.RESnr(4, &gbcpu.Regs.d); return 0 }},
		0xA3: Instruction{"RES 4,E", 8, 1, func() int { gbcpu.RESnr(4, &gbcpu.Regs.e); return 0 }},
		0xA4: Instruction{"RES 4,H", 8, 1, func() int { gbcpu.RESnr(4, &gbcpu.Regs.h); return 0 }},
		0xA5: Instruction{"RES 4,L", 8, 1, func() int { gbcpu.RESnr(4, &gbcpu.Regs.l); return 0 }},
		0xA6: Instruction{"RES 4,(HL)", 16, 1, func() int { gbcpu.RESHL(4); return 0 }},
		0xA7: Instruction{"RES 4,A", 8, 1, func() int { gbcpu.RESnr(4, &gbcpu.Regs.a); return 0 }},
		0xA8: Instruction{"RES 5,B", 8, 1, func() int { gbcpu.RESnr(5, &gbcpu.Regs.b); return 0 }},
		0xA9: Instruction{"RES 5,C", 8, 1, func() int { gbcpu.RESnr(5, &gbcpu.Regs.c); return 0 }},
		0xAA: Instruction{"RES 5,D", 8, 1, func() int { gbcpu.RESnr(5, &gbcpu.Regs.d); return 0 }},
		0xAB: Instruction{"RES 5,E", 8, 1, func() int { gbcpu.RESnr(5, &gbcpu.Regs.e); return 0 }},
		0xAC: Instruction{"RES 5,H", 8, 1, func() int { gbcpu.RESnr(5, &gbcpu.Regs.h); return 0 }},
		0xAD: Instruction{"RES 5,L", 8, 1, func() int { gbcpu.RESnr(5, &gbcpu.Regs.l); return 0 }},
		0xAE: Instruction{"RES 5,(HL)", 16, 1, func() int { gbcpu.RESHL(5); return 0 }},
		0xAF: Instruction{"RES 5,A", 8, 1, func() int { gbcpu.RESnr(5, &gbcpu.Regs.a); return 0 }},

		0xB0: Instruction{"RES 6,B", 8, 1, func() int { gbcpu.RESnr(6, &gbcpu.Regs.b); return 0 }},
		0xB1: Instruction{"RES 6,C", 8, 1, func() int { gbcpu.RESnr(6, &gbcpu.Regs.c); return 0 }},
		0xB2: Instruction{"RES 6,D", 8, 1, func() int { gbcpu.RESnr(6, &gbcpu.Regs.d); return 0 }},
		0xB3: Instruction{"RES 6,E", 8, 1, func() int { gbcpu.RESnr(6, &gbcpu.Regs.e); return 0 }},
		0xB4: Instruction{"RES 6,H", 8, 1, func() int { gbcpu.RESnr(6, &gbcpu.Regs.h); return 0 }},
		0xB5: Instruction{"RES 6,L", 8, 1, func() int { gbcpu.RESnr(6, &gbcpu.Regs.l); return 0 }},
		0xB6: Instruction{"RES 6,(HL)", 16, 1, func() int { gbcpu.RESHL(6); return 0 }},
		0xB7: Instruction{"RES 6,A", 8, 1, func() int { gbcpu.RESnr(6, &gbcpu.Regs.a); return 0 }},
		0xB8: Instruction{"RES 7,B", 8, 1, func() int { gbcpu.RESnr(7, &gbcpu.Regs.b); return 0 }},
		0xB9: Instruction{"RES 7,C", 8, 1, func() int { gbcpu.RESnr(7, &gbcpu.Regs.c); return 0 }},
		0xBA: Instruction{"RES 7,D", 8, 1, func() int { gbcpu.RESnr(7, &gbcpu.Regs.d); return 0 }},
		0xBB: Instruction{"RES 7,E", 8, 1, func() int { gbcpu.RESnr(7, &gbcpu.Regs.e); return 0 }},
		0xBC: Instruction{"RES 7,H", 8, 1, func() int { gbcpu.RESnr(7, &gbcpu.Regs.h); return 0 }},
		0xBD: Instruction{"RES 7,L", 8, 1, func() int { gbcpu.RESnr(7, &gbcpu.Regs.l); return 0 }},
		0xBE: Instruction{"RES 7,(HL)", 16, 1, func() int { gbcpu.RESHL(7); return 0 }},
		0xBF: Instruction{"RES 7,A", 8, 1, func() int { gbcpu.RESnr(7, &gbcpu.Regs.a); return 0 }},

		0xC0: Instruction{"SET 0,B", 8, 1, func() int { gbcpu.SETnr(0, &gbcpu.Regs.b); return 0 }},
		0xC1: Instruction{"SET 0,C", 8, 1, func() int { gbcpu.SETnr(0, &gbcpu.Regs.c); return 0 }},
		0xC2: Instruction{"SET 0,D", 8, 1, func() int { gbcpu.SETnr(0, &gbcpu.Regs.d); return 0 }},
		0xC3: Instruction{"SET 0,E", 8, 1, func() int { gbcpu.SETnr(0, &gbcpu.Regs.e); return 0 }},
		0xC4: Instruction{"SET 0,H", 8, 1, func() int { gbcpu.SETnr(0, &gbcpu.Regs.h); return 0 }},
		0xC5: Instruction{"SET 0,L", 8, 1, func() int { gbcpu.SETnr(0, &gbcpu.Regs.l); return 0 }},
		0xC6: Instruction{"SET 0,(HL)", 16, 1, func() int { gbcpu.SETHL(0); return 0 }},
		0xC7: Instruction{"SET 0,A", 8, 1, func() int { gbcpu.SETnr(0, &gbcpu.Regs.a); return 0 }},
		0xC8: Instruction{"SET 1,B", 8, 1, func() int { gbcpu.SETnr(1, &gbcpu.Regs.b); return 0 }},
		0xC9: Instruction{"SET 1,C", 8, 1, func() int { gbcpu.SETnr(1, &gbcpu.Regs.c); return 0 }},
		0xCA: Instruction{"SET 1,D", 8, 1, func() int { gbcpu.SETnr(1, &gbcpu.Regs.d); return 0 }},
		0xCB: Instruction{"SET 1,E", 8, 1, func() int { gbcpu.SETnr(1, &gbcpu.Regs.e); return 0 }},
		0xCC: Instruction{"SET 1,H", 8, 1, func() int { gbcpu.SETnr(1, &gbcpu.Regs.h); return 0 }},
		0xCD: Instruction{"SET 1,L", 8, 1, func() int { gbcpu.SETnr(1, &gbcpu.Regs.l); return 0 }},
		0xCE: Instruction{"SET 1,(HL)", 16, 1, func() int { gbcpu.SETHL(1); return 0 }},
		0xCF: Instruction{"SET 1,A", 8, 1, func() int { gbcpu.SETnr(1, &gbcpu.Regs.a); return 0 }},

		0xD0: Instruction{"SET 2,B", 8, 1, func() int { gbcpu.SETnr(2, &gbcpu.Regs.b); return 0 }},
		0xD1: Instruction{"SET 2,C", 8, 1, func() int { gbcpu.SETnr(2, &gbcpu.Regs.c); return 0 }},
		0xD2: Instruction{"SET 2,D", 8, 1, func() int { gbcpu.SETnr(2, &gbcpu.Regs.d); return 0 }},
		0xD3: Instruction{"SET 2,E", 8, 1, func() int { gbcpu.SETnr(2, &gbcpu.Regs.e); return 0 }},
		0xD4: Instruction{"SET 2,H", 8, 1, func() int { gbcpu.SETnr(2, &gbcpu.Regs.h); return 0 }},
		0xD5: Instruction{"SET 2,L", 8, 1, func() int { gbcpu.SETnr(2, &gbcpu.Regs.l); return 0 }},
		0xD6: Instruction{"SET 2,(HL)", 16, 1, func() int { gbcpu.SETHL(2); return 0 }},
		0xD7: Instruction{"SET 2,A", 8, 1, func() int { gbcpu.SETnr(2, &gbcpu.Regs.a); return 0 }},
		0xD8: Instruction{"SET 3,B", 8, 1, func() int { gbcpu.SETnr(3, &gbcpu.Regs.b); return 0 }},
		0xD9: Instruction{"SET 3,C", 8, 1, func() int { gbcpu.SETnr(3, &gbcpu.Regs.c); return 0 }},
		0xDA: Instruction{"SET 3,D", 8, 1, func() int { gbcpu.SETnr(3, &gbcpu.Regs.d); return 0 }},
		0xDB: Instruction{"SET 3,E", 8, 1, func() int { gbcpu.SETnr(3, &gbcpu.Regs.e); return 0 }},
		0xDC: Instruction{"SET 3,H", 8, 1, func() int { gbcpu.SETnr(3, &gbcpu.Regs.h); return 0 }},
		0xDD: Instruction{"SET 3,L", 8, 1, func() int { gbcpu.SETnr(3, &gbcpu.Regs.l); return 0 }},
		0xDE: Instruction{"SET 3,(HL)", 16, 1, func() int { gbcpu.SETHL(3); return 0 }},
		0xDF: Instruction{"SET 3,A", 8, 1, func() int { gbcpu.SETnr(3, &gbcpu.Regs.a); return 0 }},

		0xE0: Instruction{"SET 4,B", 8, 1, func() int { gbcpu.SETnr(4, &gbcpu.Regs.b); return 0 }},
		0xE1: Instruction{"SET 4,C", 8, 1, func() int { gbcpu.SETnr(4, &gbcpu.Regs.c); return 0 }},
		0xE2: Instruction{"SET 4,D", 8, 1, func() int { gbcpu.SETnr(4, &gbcpu.Regs.d); return 0 }},
		0xE3: Instruction{"SET 4,E", 8, 1, func() int { gbcpu.SETnr(4, &gbcpu.Regs.e); return 0 }},
		0xE4: Instruction{"SET 4,H", 8, 1, func() int { gbcpu.SETnr(4, &gbcpu.Regs.h); return 0 }},
		0xE5: Instruction{"SET 4,L", 8, 1, func() int { gbcpu.SETnr(4, &gbcpu.Regs.l); return 0 }},
		0xE6: Instruction{"SET 4,(HL)", 16, 1, func() int { gbcpu.SETHL(4); return 0 }},
		0xE7: Instruction{"SET 4,A", 8, 1, func() int { gbcpu.SETnr(4, &gbcpu.Regs.a); return 0 }},
		0xE8: Instruction{"SET 5,B", 8, 1, func() int { gbcpu.SETnr(5, &gbcpu.Regs.b); return 0 }},
		0xE9: Instruction{"SET 5,C", 8, 1, func() int { gbcpu.SETnr(5, &gbcpu.Regs.c); return 0 }},
		0xEA: Instruction{"SET 5,D", 8, 1, func() int { gbcpu.SETnr(5, &gbcpu.Regs.d); return 0 }},
		0xEB: Instruction{"SET 5,E", 8, 1, func() int { gbcpu.SETnr(5, &gbcpu.Regs.e); return 0 }},
		0xEC: Instruction{"SET 5,H", 8, 1, func() int { gbcpu.SETnr(5, &gbcpu.Regs.h); return 0 }},
		0xED: Instruction{"SET 5,L", 8, 1, func() int { gbcpu.SETnr(5, &gbcpu.Regs.l); return 0 }},
		0xEE: Instruction{"SET 5,(HL)", 16, 1, func() int { gbcpu.SETHL(5); return 0 }},
		0xEF: Instruction{"SET 5,A", 8, 1, func() int { gbcpu.SETnr(5, &gbcpu.Regs.a); return 0 }},

		0xF0: Instruction{"SET 6,B", 8, 1, func() int { gbcpu.SETnr(6, &gbcpu.Regs.b); return 0 }},
		0xF1: Instruction{"SET 6,C", 8, 1, func() int { gbcpu.SETnr(6, &gbcpu.Regs.c); return 0 }},
		0xF2: Instruction{"SET 6,D", 8, 1, func() int { gbcpu.SETnr(6, &gbcpu.Regs.d); return 0 }},
		0xF3: Instruction{"SET 6,E", 8, 1, func() int { gbcpu.SETnr(6, &gbcpu.Regs.e); return 0 }},
		0xF4: Instruction{"SET 6,H", 8, 1, func() int { gbcpu.SETnr(6, &gbcpu.Regs.h); return 0 }},
		0xF5: Instruction{"SET 6,L", 8, 1, func() int { gbcpu.SETnr(6, &gbcpu.Regs.l); return 0 }},
		0xF6: Instruction{"SET 6,(HL)", 16, 1, func() int { gbcpu.SETHL(6); return 0 }},
		0xF7: Instruction{"SET 6,A", 8, 1, func() int { gbcpu.SETnr(6, &gbcpu.Regs.a); return 0 }},
		0xF8: Instruction{"SET 7,B", 8, 1, func() int { gbcpu.SETnr(7, &gbcpu.Regs.b); return 0 }},
		0xF9: Instruction{"SET 7,C", 8, 1, func() int { gbcpu.SETnr(7, &gbcpu.Regs.c); return 0 }},
		0xFA: Instruction{"SET 7,D", 8, 1, func() int { gbcpu.SETnr(7, &gbcpu.Regs.d); return 0 }},
		0xFB: Instruction{"SET 7,E", 8, 1, func() int { gbcpu.SETnr(7, &gbcpu.Regs.e); return 0 }},
		0xFC: Instruction{"SET 7,H", 8, 1, func() int { gbcpu.SETnr(7, &gbcpu.Regs.h); return 0 }},
		0xFD: Instruction{"SET 7,L", 8, 1, func() int { gbcpu.SETnr(7, &gbcpu.Regs.l); return 0 }},
		0xFE: Instruction{"SET 7,(HL)", 16, 1, func() int { gbcpu.SETHL(7); return 0 }},
		0xFF: Instruction{"SET 7,A", 8, 1, func() int { gbcpu.SETnr(7, &gbcpu.Regs.a); return 0 }},
	}
}
